pipeline {
    agent any
    tools {
        maven "maven 3.9"
        jdk "jdk17"
    }
    environment{
        registryCredentials = 'ecr:us-east-1:awscreds'
        imageName = "911167907720.dkr.ecr.us-east-1.amazonaws.com/vprofileappimage"
        vprofileRegistry = "https://911167907720.dkr.ecr.us-east-1.amazonaws.com"
        ECS_CLUSTER_NAME = 'DevCluster' // Replace with your ECS cluster name
        ECS_SERVICE_NAME = 'vprofileappsvc' // Replace with your ECS service name
        AWS_REGION = 'us-east-1'                  // AWS Region
    }    
    stages {
        stage('Fetch code') {
            steps {
                git branch: 'docker', url: 'https://github.com/arjun2907/Devops.git'
            }
        }
        stage('Build') {
            steps {
                sh 'mvn install -DskipTests'
            }
            post {
                success {
                    echo "Archiving Artifact"
                    archiveArtifacts artifacts: '**/*.war'
                }
            }
        }
        stage('unit test') {
            steps {
                sh 'mvn test'
            }
        }
        stage('checkstyle') {
            steps {
                sh 'mvn checkstyle:checkstyle'
            }
        }
        stage("build & SonarQube analysis") { // code analysis
            environment {
                scannerHome = tool 'sonar6.2'
            }
            steps {
                withSonarQubeEnv('sonarserver') {
                    sh '''${scannerHome}/bin/sonar-scanner -Dsonar.projectKey=vprofile \
                        -Dsonar.projectName=vprofile-repo \
                        -Dsonar.projectVersion=1.0 \
                        -Dsonar.sources=src/ \
                        -Dsonar.java.binaries=target/test-classes/com/visualpathit/account/controllerTest/ \
                        -Dsonar.junit.reportsPath=target/surefire-reports/ \
                        -Dsonar.jacoco.reportsPath=target/jacoco.exec \
                        -Dsonar.java.checkstyle.reportPaths=target/checkstyle-result.xml'''
                }
            }
        }
        stage("Build app image") {
            steps {
                script{
                    dockerImage = docker.build( imageName + ":$BUILD_NUMBER", "./Docker-files/app/multistage/")
                }
            }
        }
        stage("Upload app image") {
            steps {
                script{
                    docker.withRegistry( vprofileRegistry, registryCredentials) {
                        dockerImage.push("$BUILD_NUMBER")
                        dockerImage.push('latest')
                    }
                }
            }
        }
        stage("Remove container images") {
            steps {
                script{
                        sh 'docker rmi -f $(docker images -a -q)'
                    }
                }
            }
        stage('Deploy to ECS') {
            steps {
                script {
                    echo "Deploying to ECS..."
                    withAWS(credentials: 'awscreds') {
                    sh '''
                    aws ecs update-service \
                    --cluster $ECS_CLUSTER_NAME \
                    --service $ECS_SERVICE_NAME \
                    --force-new-deployment \
                    --region $AWS_REGION
                '''
            }
        }
    }
}
        stage('Workspace Cleanup') { // Cleanup Stage
            steps {
                script {
                    echo "Cleaning up the workspace..."
                    cleanWs() // Cleans the workspace
                }
            }
        }

        }                
    post {
        success {
            echo 'Deployment to ECS completed successfully!'
        }
        failure {
            echo 'Pipeline failed. Check the logs for details.'
        }
    }
}
